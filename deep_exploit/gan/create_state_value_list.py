import codecs
import json
import pandas as pd


def find_target_exploits(target_tree, exploits):
    for port, value in target_tree.items():
        if isinstance(value, dict) and "exploit" in value:
            for exploit in value["exploit"]:
                exploits.append(port + "," + exploit)


def create_state_list(target_tree_filename):
    # Load the exploit tree
    fin = codecs.open("data/exploit_tree.json", "r", "utf-8")
    exploit_tree = json.loads(fin.read().replace("\0", ""))
    fin.close()

    # Load the target tree
    fin = codecs.open("data/" + target_tree_filename, "r", "utf-8")
    target_tree = json.loads(fin.read().replace("\0", ""))
    fin.close()

    exploits = []
    find_target_exploits(target_tree, exploits)

    state_list = []
    for port_and_exploit in exploits:
        port, exploit = port_and_exploit.split(",")
        for payload in exploit_tree[exploit[8:]]["targets"]["0"]:
            state_list.append([port, exploit[8:], payload])
    df = pd.DataFrame(state_list).drop_duplicates()
    df.to_csv(
        "data/state_list.csv",
        index=False,
        header=["port", "exploit", "payload"],
        sep=",",
    )
    print("State list created")


def populate_action_values():
    state_list = pd.read_csv(
        "data/state_list.csv",
        dtype={"port": "object", "exploit": "object", "payload": "object"},
    )
    successful_actions = pd.read_csv(
        "data/successful_actions.csv",
        dtype={"port": "object", "exploit": "object", "payload": "object"},
    )

    # Add a new column with 1 if the row matches, otherwise 0
    state_list["value"] = (
        state_list.merge(
            successful_actions,
            on=["port", "exploit", "payload"],
            how="left",
            indicator=True,
        )["_merge"]
        == "both"
    )
    state_list["value"] = state_list["value"].astype(int)
    state_list.to_csv(
        "data/state_value_list.csv",
        index=False,
        header=["port", "exploit", "payload", "value"],
        sep=",",
    )
    print("Action values populated")


if __name__ == "__main__":
    # Change the target tree filename based on its IP address
    target_tree_filename = "target_info_192.168.1.72.json"
    create_state_list(target_tree_filename)
    populate_action_values()
