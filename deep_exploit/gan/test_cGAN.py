import numpy as np
import tensorflow as tf
import time
import pandas as pd
import codecs
import json

target_tree_filename = "target_info_192.168.1.72.json"
state_value_list = pd.read_csv("data/state_value_list.csv")
payload_list = pd.read_csv("data/payload_list.csv", header=None)

# Load the exploit tree
fin = codecs.open("backup/exploit_tree_full.json", "r", "utf-8")
exploit_tree = json.loads(fin.read().replace("\0", ""))
fin.close()

# Load the target tree
fin = codecs.open("data/" + target_tree_filename, "r", "utf-8")
target_tree = json.loads(fin.read().replace("\0", ""))
fin.close()

# Hyperparameters
latent_dim = 16  # Small noise vector for stability in training
num_classes = len(state_value_list)
batch_size = 32

gan = tf.keras.models.load_model("gan/model/cGAN.keras")

start = time.time()

# Generate random noise
noise = np.random.normal(0, 1, (batch_size, latent_dim))
fake_labels = np.random.randint(0, num_classes, batch_size)

# Generate fake samples
fake_samples = gan.predict([noise, fake_labels])

# Print the fake samples
print(fake_samples)

# Output the sample with the highest probability
sample = np.argmax(fake_samples[0])

print(sample)

generated_action = state_value_list.loc[np.argmax(fake_samples[0])]
generated_port, generated_exploit, generated_payload = (
    generated_action["port"],
    generated_action["exploit"],
    generated_action["payload"],
)
action_num = payload_list.index.get_loc(
    payload_list[payload_list[0] == generated_payload].index[0]
)
target_info = {
    "protocol": target_tree[generated_port]["protocol"],
    "target_path": target_tree[generated_port]["target_path"],
    "prod_name": target_tree[generated_port]["prod_name"],
    "version": target_tree[generated_port]["version"],
    "exploit": generated_exploit,
    "target": 0,
    "port": generated_port,
}
print(target_info)

end = time.time()
print(f"Execution time: {end - start:.4f} seconds")
